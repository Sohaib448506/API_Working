{"ast":null,"code":"var _jsxFileName = \"/home/sohaib/Desktop/Practice/bookStore/API Work/src/forms/LoginForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useState, useEffect } from 'react';\nimport * as Yup from \"yup\";\nimport { useFormik } from 'formik';\nimport Button from '../components/Button';\nimport TextField from '@mui/material/TextField';\nimport { getUser } from '../api/apiBasicAuth';\nimport { CancelToken } from 'apisauce';\nimport { AppContext } from '../context/AppContext';\nimport useLogin from '../hooks/useLogin';\nimport Error from '../components/Error'; //Defining our yup validation\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FormSchema = Yup.object({\n  email: Yup.string().email(\"Must be a valid e-mail format\").required(),\n  password: Yup.string().required()\n});\nconst initialValues = {\n  email: '',\n  password: ''\n};\nexport default function LoginForm() {\n  _s();\n\n  const {\n    setUser\n  } = useContext(AppContext);\n  const [loginCreds, setLoginCreds] = useState({});\n  const [error, setError] = useState('');\n  useLogin(loginCreds, setLoginCreds, setError, setUser);\n\n  const handleSubmit = values => {\n    console.log(values);\n    setLoginCreds(values);\n  };\n\n  const formik = useFormik({\n    initialValues: initialValues,\n    validationSchema: FormSchema,\n    onSubmit: values => {\n      handleSubmit(values);\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: formik.handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(TextField, {\n      id: \"email\",\n      name: \"email\",\n      fullWidth: true,\n      sx: {\n        mb: 2,\n        mt: 2\n      },\n      label: \"email\",\n      placeholder: \"email\",\n      value: formik.values.email,\n      onChange: formik.handleChange,\n      error: formik.touched.email && Boolean(formik.errors.email),\n      helperText: formik.touched.email && formik.errors.email\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      id: \"password\",\n      name: \"password\",\n      type: \"password\",\n      fullWidth: true,\n      sx: {\n        mb: 2\n      },\n      label: \"password\",\n      placeholder: \"password\",\n      value: formik.values.password,\n      onChange: formik.handleChange,\n      error: formik.touched.password && Boolean(formik.errors.password),\n      helperText: formik.touched.password && formik.errors.password\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      type: \"submit\",\n      sx: {\n        width: \"100%\"\n      },\n      children: \"Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 9\n  }, this);\n} // import React, {useContext, useState, useEffect} from 'react';\n// import * as Yup from \"yup\";\n// import { useFormik } from 'formik';\n// import Button from '../components/Button';\n// import TextField from '@mui/material/TextField';\n// import {getUser} from '../api/apiBasicAuth';\n// import {putUser} from '../api/apiUser';\n// import {delUser} from '../api/apiUser';\n// import {postUser} from '../api/apiUser';\n// import {CancelToken} from 'apisauce';\n// import { AppContext } from '../context/AppContext';\n// import useLogin from '../hooks/useLogin';\n// import useRegister from '../hooks/useRegister';\n// import useEdit from '../hooks/useEdit';\n// import useDelete from '../hooks/useDelete';\n// //Defining our yup validation\n// const FormSchema=Yup.object(\n//     {\n//         email:Yup.string().email(\"Must be a valid e-mail format\").required(),\n//         password:Yup.string().required()\n//     }\n// )\n// export default function LoginForm(user){\n//     const {setUser} = useContext(AppContext);\n//     const [loginCreds, setLoginCreds] = useState({});\n//     const [error, setError] = useState('')\n//     const [newUser, setNewUser] = useState('')\n//     const [editUser, setEditUser] = useState('')\n//     const [deleteUser, setDeleteUser] = useState('')\n//     useLogin(loginCreds, setLoginCreds, setError, setUser)\n//     useRegister(newUser)\n//     useEdit(editUser)\n//     useDelete(deleteUser)\n//     const initialValues={\n//         email:'',\n//         password:'',\n//         confirm_password:''\n//     }\n//     const handleSubmit=(values, resetForm)=>{\n//         if (user){\n//             setEditUser(values)\n//         }else{\n//             setNewUser(values)\n//         }\n//         console.log(values)\n//         resetForm(initialValues)\n//     }\n//     const handleDelete=()=>{\n//         setDeleteUser(user?.id)\n//     }\n//     const formik = useFormik({\n//         initialValues:initialValues,\n//         validationSchema:FormSchema,\n//         onSubmit:(values)=>{handleSubmit(values)}\n//     })\n//     return(\n//         <form onSubmit={formik.handleSubmit}>\n//             <TextField\n//                 id=\"email\"\n//                 name=\"email\"\n//                 fullWidth\n//                 sx={{mb:2, mt:2}}\n//                 label=\"email\"\n//                 placeholder=\"email\"\n//                 value={formik.values.email}\n//                 onChange={formik.handleChange}\n//                 error={formik.touched.email && Boolean(formik.errors.email)}\n//                 helperText={formik.touched.email && formik.errors.email}            \n//             />\n//             <TextField\n//                 id=\"password\"\n//                 name=\"password\"\n//                 type=\"password\"\n//                 fullWidth\n//                 sx={{mb:2}}\n//                 label=\"password\"\n//                 placeholder=\"password\"\n//                 value={formik.values.password}\n//                 onChange={formik.handleChange}\n//                 error={formik.touched.password && Boolean(formik.errors.password)}\n//                 helperText={formik.touched.password && formik.errors.password}            \n//             />\n//             <TextField\n//                 id=\"confirm_password\"\n//                 name=\"confirm_password\"\n//                 type=\"password\"\n//                 fullWidth\n//                 sx={{mb:2}}\n//                 label=\"confirm_password\"\n//                 placeholder=\"confirm_password\"\n//                 value={formik.values.confirm_password}\n//                 onChange={formik.handleChange}\n//                 error={formik.touched.confirm_password && Boolean(formik.errors.confirm_password)}\n//                 helperText={formik.touched.confirm_password && formik.errors.confirm_password}            \n//             />\n//             <Button type=\"submit\" onClick={()=>handleSubmit()} sx={{width:\"100%\"}}>Login</Button>\n//             <Button color=\"error\" onClick={()=>handleDelete()} sx={{width:\"100%\", my:1}}>Delete</Button>\n//             <Button type=\"submit\" sx={{width:\"100%\"}}>Edit</Button>\n//             <Button color=\"error\" type=\"submit\" sx={{width:\"100%\"}}>Register</Button>\n//         </form>\n//     )\n// }\n\n_s(LoginForm, \"fnoDSzeT7IE/ZT0+C8kwXJDVm28=\", false, function () {\n  return [useLogin, useFormik];\n});\n\n_c = LoginForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"LoginForm\");","map":{"version":3,"names":["React","useContext","useState","useEffect","Yup","useFormik","Button","TextField","getUser","CancelToken","AppContext","useLogin","Error","FormSchema","object","email","string","required","password","initialValues","LoginForm","setUser","loginCreds","setLoginCreds","error","setError","handleSubmit","values","console","log","formik","validationSchema","onSubmit","mb","mt","handleChange","touched","Boolean","errors","width"],"sources":["/home/sohaib/Desktop/Practice/bookStore/API Work/src/forms/LoginForm.js"],"sourcesContent":["import React, {useContext, useState, useEffect} from 'react';\nimport * as Yup from \"yup\";\nimport { useFormik } from 'formik';\nimport Button from '../components/Button';\nimport TextField from '@mui/material/TextField';\nimport {getUser} from '../api/apiBasicAuth';\nimport {CancelToken} from 'apisauce';\nimport { AppContext } from '../context/AppContext';\nimport useLogin from '../hooks/useLogin';\nimport Error from '../components/Error';\n\n\n\n//Defining our yup validation\nconst FormSchema=Yup.object(\n    {\n        email:Yup.string().email(\"Must be a valid e-mail format\").required(),\n        password:Yup.string().required()\n    }\n)\nconst initialValues={\n    email:'',\n    password:''\n}\nexport default function LoginForm(){\n    const {setUser} = useContext(AppContext);\n    const [loginCreds, setLoginCreds] = useState({});\n    const [error, setError] = useState('')\n    \n    useLogin(loginCreds, setLoginCreds, setError, setUser)\n\n    const handleSubmit=(values)=>{\n        console.log(values)\n        setLoginCreds(values)\n    }\n    \n\n\n    const formik = useFormik({\n        initialValues:initialValues,\n        validationSchema:FormSchema,\n        onSubmit:(values)=>{handleSubmit(values)}\n    })\n\n    return(\n        <form onSubmit={formik.handleSubmit}>\n            <TextField\n                id=\"email\"\n                name=\"email\"\n                fullWidth\n                sx={{mb:2, mt:2}}\n                label=\"email\"\n                placeholder=\"email\"\n                value={formik.values.email}\n                onChange={formik.handleChange}\n                error={formik.touched.email && Boolean(formik.errors.email)}\n                helperText={formik.touched.email && formik.errors.email}            \n            />\n\n            <TextField\n                id=\"password\"\n                name=\"password\"\n                type=\"password\"\n                fullWidth\n                sx={{mb:2}}\n                label=\"password\"\n                placeholder=\"password\"\n                value={formik.values.password}\n                onChange={formik.handleChange}\n                error={formik.touched.password && Boolean(formik.errors.password)}\n                helperText={formik.touched.password && formik.errors.password}            \n            />\n\n            <Button type=\"submit\" sx={{width:\"100%\"}}>Login</Button>\n        </form>\n    )\n\n}\n\n// import React, {useContext, useState, useEffect} from 'react';\n// import * as Yup from \"yup\";\n// import { useFormik } from 'formik';\n// import Button from '../components/Button';\n// import TextField from '@mui/material/TextField';\n// import {getUser} from '../api/apiBasicAuth';\n// import {putUser} from '../api/apiUser';\n// import {delUser} from '../api/apiUser';\n// import {postUser} from '../api/apiUser';\n// import {CancelToken} from 'apisauce';\n// import { AppContext } from '../context/AppContext';\n// import useLogin from '../hooks/useLogin';\n// import useRegister from '../hooks/useRegister';\n// import useEdit from '../hooks/useEdit';\n// import useDelete from '../hooks/useDelete';\n\n\n// //Defining our yup validation\n// const FormSchema=Yup.object(\n//     {\n//         email:Yup.string().email(\"Must be a valid e-mail format\").required(),\n//         password:Yup.string().required()\n//     }\n// )\n\n// export default function LoginForm(user){\n//     const {setUser} = useContext(AppContext);\n//     const [loginCreds, setLoginCreds] = useState({});\n//     const [error, setError] = useState('')\n//     const [newUser, setNewUser] = useState('')\n//     const [editUser, setEditUser] = useState('')\n//     const [deleteUser, setDeleteUser] = useState('')\n\n    \n//     useLogin(loginCreds, setLoginCreds, setError, setUser)\n//     useRegister(newUser)\n//     useEdit(editUser)\n//     useDelete(deleteUser)\n\n//     const initialValues={\n//         email:'',\n//         password:'',\n//         confirm_password:''\n//     }\n\n//     const handleSubmit=(values, resetForm)=>{\n//         if (user){\n//             setEditUser(values)\n//         }else{\n//             setNewUser(values)\n//         }\n//         console.log(values)\n//         resetForm(initialValues)\n//     }\n//     const handleDelete=()=>{\n//         setDeleteUser(user?.id)\n//     }\n\n\n//     const formik = useFormik({\n//         initialValues:initialValues,\n//         validationSchema:FormSchema,\n//         onSubmit:(values)=>{handleSubmit(values)}\n//     })\n\n//     return(\n//         <form onSubmit={formik.handleSubmit}>\n//             <TextField\n//                 id=\"email\"\n//                 name=\"email\"\n//                 fullWidth\n//                 sx={{mb:2, mt:2}}\n//                 label=\"email\"\n//                 placeholder=\"email\"\n//                 value={formik.values.email}\n//                 onChange={formik.handleChange}\n//                 error={formik.touched.email && Boolean(formik.errors.email)}\n//                 helperText={formik.touched.email && formik.errors.email}            \n//             />\n\n//             <TextField\n//                 id=\"password\"\n//                 name=\"password\"\n//                 type=\"password\"\n//                 fullWidth\n//                 sx={{mb:2}}\n//                 label=\"password\"\n//                 placeholder=\"password\"\n//                 value={formik.values.password}\n//                 onChange={formik.handleChange}\n//                 error={formik.touched.password && Boolean(formik.errors.password)}\n//                 helperText={formik.touched.password && formik.errors.password}            \n//             />\n\n//             <TextField\n//                 id=\"confirm_password\"\n//                 name=\"confirm_password\"\n//                 type=\"password\"\n//                 fullWidth\n//                 sx={{mb:2}}\n//                 label=\"confirm_password\"\n//                 placeholder=\"confirm_password\"\n//                 value={formik.values.confirm_password}\n//                 onChange={formik.handleChange}\n//                 error={formik.touched.confirm_password && Boolean(formik.errors.confirm_password)}\n//                 helperText={formik.touched.confirm_password && formik.errors.confirm_password}            \n//             />\n\n//             <Button type=\"submit\" onClick={()=>handleSubmit()} sx={{width:\"100%\"}}>Login</Button>\n//             <Button color=\"error\" onClick={()=>handleDelete()} sx={{width:\"100%\", my:1}}>Delete</Button>\n//             <Button type=\"submit\" sx={{width:\"100%\"}}>Edit</Button>\n//             <Button color=\"error\" type=\"submit\" sx={{width:\"100%\"}}>Register</Button>\n\n//         </form>\n//     )\n\n// }\n\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,UAAf,EAA2BC,QAA3B,EAAqCC,SAArC,QAAqD,OAArD;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AACA,SAASC,SAAT,QAA0B,QAA1B;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,SAAQC,OAAR,QAAsB,qBAAtB;AACA,SAAQC,WAAR,QAA0B,UAA1B;AACA,SAASC,UAAT,QAA2B,uBAA3B;AACA,OAAOC,QAAP,MAAqB,mBAArB;AACA,OAAOC,KAAP,MAAkB,qBAAlB,C,CAIA;;;AACA,MAAMC,UAAU,GAACT,GAAG,CAACU,MAAJ,CACb;EACIC,KAAK,EAACX,GAAG,CAACY,MAAJ,GAAaD,KAAb,CAAmB,+BAAnB,EAAoDE,QAApD,EADV;EAEIC,QAAQ,EAACd,GAAG,CAACY,MAAJ,GAAaC,QAAb;AAFb,CADa,CAAjB;AAMA,MAAME,aAAa,GAAC;EAChBJ,KAAK,EAAC,EADU;EAEhBG,QAAQ,EAAC;AAFO,CAApB;AAIA,eAAe,SAASE,SAAT,GAAoB;EAAA;;EAC/B,MAAM;IAACC;EAAD,IAAYpB,UAAU,CAACS,UAAD,CAA5B;EACA,MAAM,CAACY,UAAD,EAAaC,aAAb,IAA8BrB,QAAQ,CAAC,EAAD,CAA5C;EACA,MAAM,CAACsB,KAAD,EAAQC,QAAR,IAAoBvB,QAAQ,CAAC,EAAD,CAAlC;EAEAS,QAAQ,CAACW,UAAD,EAAaC,aAAb,EAA4BE,QAA5B,EAAsCJ,OAAtC,CAAR;;EAEA,MAAMK,YAAY,GAAEC,MAAD,IAAU;IACzBC,OAAO,CAACC,GAAR,CAAYF,MAAZ;IACAJ,aAAa,CAACI,MAAD,CAAb;EACH,CAHD;;EAOA,MAAMG,MAAM,GAAGzB,SAAS,CAAC;IACrBc,aAAa,EAACA,aADO;IAErBY,gBAAgB,EAAClB,UAFI;IAGrBmB,QAAQ,EAAEL,MAAD,IAAU;MAACD,YAAY,CAACC,MAAD,CAAZ;IAAqB;EAHpB,CAAD,CAAxB;EAMA,oBACI;IAAM,QAAQ,EAAEG,MAAM,CAACJ,YAAvB;IAAA,wBACI,QAAC,SAAD;MACI,EAAE,EAAC,OADP;MAEI,IAAI,EAAC,OAFT;MAGI,SAAS,MAHb;MAII,EAAE,EAAE;QAACO,EAAE,EAAC,CAAJ;QAAOC,EAAE,EAAC;MAAV,CAJR;MAKI,KAAK,EAAC,OALV;MAMI,WAAW,EAAC,OANhB;MAOI,KAAK,EAAEJ,MAAM,CAACH,MAAP,CAAcZ,KAPzB;MAQI,QAAQ,EAAEe,MAAM,CAACK,YARrB;MASI,KAAK,EAAEL,MAAM,CAACM,OAAP,CAAerB,KAAf,IAAwBsB,OAAO,CAACP,MAAM,CAACQ,MAAP,CAAcvB,KAAf,CAT1C;MAUI,UAAU,EAAEe,MAAM,CAACM,OAAP,CAAerB,KAAf,IAAwBe,MAAM,CAACQ,MAAP,CAAcvB;IAVtD;MAAA;MAAA;MAAA;IAAA,QADJ,eAcI,QAAC,SAAD;MACI,EAAE,EAAC,UADP;MAEI,IAAI,EAAC,UAFT;MAGI,IAAI,EAAC,UAHT;MAII,SAAS,MAJb;MAKI,EAAE,EAAE;QAACkB,EAAE,EAAC;MAAJ,CALR;MAMI,KAAK,EAAC,UANV;MAOI,WAAW,EAAC,UAPhB;MAQI,KAAK,EAAEH,MAAM,CAACH,MAAP,CAAcT,QARzB;MASI,QAAQ,EAAEY,MAAM,CAACK,YATrB;MAUI,KAAK,EAAEL,MAAM,CAACM,OAAP,CAAelB,QAAf,IAA2BmB,OAAO,CAACP,MAAM,CAACQ,MAAP,CAAcpB,QAAf,CAV7C;MAWI,UAAU,EAAEY,MAAM,CAACM,OAAP,CAAelB,QAAf,IAA2BY,MAAM,CAACQ,MAAP,CAAcpB;IAXzD;MAAA;MAAA;MAAA;IAAA,QAdJ,eA4BI,QAAC,MAAD;MAAQ,IAAI,EAAC,QAAb;MAAsB,EAAE,EAAE;QAACqB,KAAK,EAAC;MAAP,CAA1B;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QA5BJ;EAAA;IAAA;IAAA;IAAA;EAAA,QADJ;AAiwBnB,S;UAKpBT,Q,EASeN,S;;;KAdKe,S"},"metadata":{},"sourceType":"module"}